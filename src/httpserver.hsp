
// copyright | TomSuzuki 2020


#module

#define serverName "hsp-server"
#define DIR	"./html"

#deffunc initServer int portNumber,int socketNumber
	socketid = socketNumber
	port = portNumber

	// chdir
	dirlist temp,DIR,0
	if(stat == 0):mkdir DIR
	chdir DIR

	// IP get
	ipget@
	ipAddress = refstr
	url = strf("http://%s:%d/index.html",ipAddress,portNumber)
	mes strf("open server. [%s]",url)

	return

#deffunc waitHTTPRequest
	// init
	socket = socketid
	socketSub = (socketid + 1) \ 32

	// make
*init
	sockclose@ socketSub
	sockmake@ socket,port
	if(stat != 0){
		dialog "Error - init Error",1
		stop
	}
	

	// for response
	sdim response,1024*2

	// wait request
	repeat
		ct = cnt
		sockwait@ socket,socketSub
		if(stat == 0):break
		if(stat > 1){
			dialog "Error - datawait Error",1
			stop
		}
		await 1
	loop
	requestFrom = refstr

	// get
	sockcheck@ socketSub
	if(stat == 0):sockget@ response,varsize(response),socketSub
	if(response == ""):goto *init // if body is nil

	// response analysis (ex.)GET /index.html HTTP/1.1
	split response,"\n",request
	split request," ",method,name

	// return
	sdim res,256,2
	requestName = name
	requestMethod = method
	
	return response

#deffunc returnText int httpStatus,str httpBody
	// head
	head = createHead(status, ".txt")

	// put
	sockput@ head,socketSub
	sockput@ httpBody,socketSub
	
	return

#deffunc returnBuf int httpStatus,var httpBody
	// head
	head = createHead(status, ".txt")

	// put
	sockput@ head,socketSub
	sockputb@ httpBody,0,varsize(httpBody),socketSub
	
	return

#defcfunc returnFile str path
	// init
	sdim buf
	status = 404

	// load file
	loadBuf path,buf
	if(stat != -1){
		status = 200
	}

	// head
	head = createHead(status, path)

	// put
	sockput@ head,socketSub
	sockputb@ buf,0,varsize(buf),socketSub
	
	return status

#defcfunc createHead int _status,str _path
	// head
	head =  strf("HTTP/1.1 %d %s\n",_status,httpResponseMessage(_status))
	head += strf("Content-Type: %s charset=shift_jis\n",contentTypeFromExtension(_path))
	head += strf("Connection: close\n")
	head += strf("Server: %s\n",serverName)
	head += strf("\n")
	
	return head
	
#defcfunc httpResponseMessage int httpStatus

	if(httpStatus == 100):return "Continue"
	if(httpStatus == 101):return "Switching Protocol"
	if(httpStatus == 102):return "Processing"
	if(httpStatus == 103):return "Early Hints"

	if(httpStatus == 200):return "OK"
	if(httpStatus == 201):return "Created"
	if(httpStatus == 202):return "Accepted"
	if(httpStatus == 203):return "Non-Authoritative Information"
	if(httpStatus == 204):return "No Content"
	if(httpStatus == 205):return "Reset Content"
	if(httpStatus == 206):return "Partial Content"
	if(httpStatus == 207):return "Multi-Status"
	if(httpStatus == 208):return "Already Reported"
	if(httpStatus == 226):return "IM Used"

	if(httpStatus == 300):return "Multiple Choice"
	if(httpStatus == 301):return "Moved Permanently"
	if(httpStatus == 302):return "Found"
	if(httpStatus == 303):return "See Other"
	if(httpStatus == 304):return "Not Modified"
	if(httpStatus == 305):return "Use Proxy"
	if(httpStatus == 306):return "unused"
	if(httpStatus == 307):return "Temporary Redirect"
	if(httpStatus == 308):return "Permanent Redirect"
	
	if(httpStatus == 400):return "Bad Request"
	if(httpStatus == 401):return "Unauthorized"
	if(httpStatus == 402):return "Payment Required"
	if(httpStatus == 403):return "Forbidden"
	if(httpStatus == 404):return "Not Found"
	if(httpStatus == 405):return "Method Not Allowed"
	if(httpStatus == 406):return "Not Acceptable"
	if(httpStatus == 407):return "Proxy Authentication Required"
	if(httpStatus == 408):return "Request Timeout"
	if(httpStatus == 409):return "Conflict"
	if(httpStatus == 410):return "Gone"
	if(httpStatus == 411):return "Length Required"
	if(httpStatus == 412):return "Precondition Failed"
	if(httpStatus == 413):return "Payload Too Large"
	if(httpStatus == 414):return "URI Too Long"
	if(httpStatus == 415):return "Unsupported Media Type"
	if(httpStatus == 416):return "Range Not Satisfiable"
	if(httpStatus == 417):return "Expectation Failed"
	if(httpStatus == 418):return "I'm a teapot"
	if(httpStatus == 421):return "Misdirected Request"
	if(httpStatus == 422):return "Unprocessable Entity"
	if(httpStatus == 423):return "Locked"
	if(httpStatus == 424):return "Failed Dependency"
	if(httpStatus == 425):return "Too Early"
	if(httpStatus == 426):return "Upgrade Required"
	if(httpStatus == 428):return "Precondition Required"
	if(httpStatus == 429):return "Too Many Requests"
	if(httpStatus == 431):return "Request Header Fields Too Large"
	if(httpStatus == 451):return "Unavailable For Legal Reasons"
	
	if(httpStatus == 500):return "Internal Server Error"
	if(httpStatus == 501):return "Not Implemented"
	if(httpStatus == 502):return "Bad Gateway"
	if(httpStatus == 503):return "Service Unavailable"
	if(httpStatus == 504):return "Gateway Timeout"
	if(httpStatus == 505):return "HTTP Version Not Supported"
	if(httpStatus == 506):return "Variant Also Negotiates"
	if(httpStatus == 507):return "Insufficient Storage"
	if(httpStatus == 508):return "Loop Detected"
	if(httpStatus == 510):return "Not Extended"
	if(httpStatus == 511):return "Network Authentication Required"
	
	return ""

#defcfunc contentTypeFromExtension str p1

	extension = getpath(p1,2+16)
	
	if(extension == ".html")	:return "text/html"
	if(extension == ".htm")		:return "text/html"
	if(extension == ".xml")		:return "text/xml"
	if(extension == ".js")		:return "text/javascript"
	if(extension == ".vbs")		:return "text/vbscript"
	if(extension == ".css")		:return "text/css"
	if(extension == ".gif")		:return "image/gif"
	if(extension == ".jpg")		:return "image/jpeg"
	if(extension == ".jpeg")	:return "image/jpeg"
	if(extension == ".jpe")		:return "image/jpeg"
	if(extension == ".jfif")	:return "image/jpeg"
	if(extension == ".jfi")		:return "image/jpeg"
	if(extension == ".jif")		:return "image/jpeg"
	if(extension == ".png")		:return "image/png"
	if(extension == ".cgi")		:return "application/x-httpd-cgi"
	if(extension == ".doc")		:return "application/msword"
	if(extension == ".pdf")		:return "application/pdf"
	if(extension == ".csv")		:return "text/csv"
	if(extension == ".exe")		:return "application/octet-stream"
	if(extension == ".json")	:return "application/json"
	if(extension == ".bmp")		:return "image/bmp"
	if(extension == ".svg")		:return "image/svg+xml"
	if(extension == ".zip")		:return "application/zip"
	if(extension == ".mp3")		:return "audio/mpeg"
	if(extension == ".mp4")		:return "video/mp4"
	if(extension == ".mpeg")	:return "video/mpeg"

	return "text/plain"

#defcfunc getHTTPName
	return requestName
	
#defcfunc getHTTPMethod
	return requestMethod

#defcfunc getHTTPFrom
	return requestFrom

#defcfunc getHeader str headText,str headName
	notedata = headText
	headNameSelect = getpath(headName + ": ",16)
	res = ""
	len = strlen(headNameSelect)
	notesel notedata
	repeat noteinfo(0)
		noteget data,cnt
		d = getpath(data,16)
		if(strmid(d,0,len) == headNameSelect){
			res = strmid(data,-1,strlen(data)-len)
			break
		}
	loop
	noteunsel

	return res

#defcfunc getParameter str headText,str parameterName
	res = ""

	temp = headText
	notesel temp
	noteget data.0
	noteunsel

	split data," ",temp,data
	split data,"?",temp,data
	split data,"&",data
	repeat stat
		split data(cnt),"=",key,dat
		if(key == parameterName){
			res = dat
			break
		}
	loop
	
	return res
#global

#module
#defcfunc loadText str path
	mref size,64
	notedata = ""
	exist path
	size = strsize
	if(size != -1){
		notesel notedata
		noteload path
		noteunsel
	}
	return notedata
#deffunc loadBuf str path,var buf
	sdim buf
	mref size,64
	exist path
	size = strsize
	if(size != -1){
		sdim buf,size
		bload path,buf,-1
	}
	return
#global
